### YamlMime:ManagedReference
items:
- uid: System.Collections.SortedList
  commentId: T:System.Collections.SortedList
  id: SortedList
  parent: System.Collections
  children:
  - System.Collections.SortedList.#ctor
  - System.Collections.SortedList.#ctor(System.Collections.IComparer)
  - System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  - System.Collections.SortedList.#ctor(System.Int32)
  - System.Collections.SortedList.Add(System.Object,System.Object)
  - System.Collections.SortedList.Capacity
  - System.Collections.SortedList.Clear
  - System.Collections.SortedList.Clone
  - System.Collections.SortedList.Contains(System.Object)
  - System.Collections.SortedList.ContainsKey(System.Object)
  - System.Collections.SortedList.ContainsValue(System.Object)
  - System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  - System.Collections.SortedList.Count
  - System.Collections.SortedList.GetByIndex(System.Int32)
  - System.Collections.SortedList.GetEnumerator
  - System.Collections.SortedList.GetKey(System.Int32)
  - System.Collections.SortedList.GetKeyList
  - System.Collections.SortedList.GetValueList
  - System.Collections.SortedList.IndexOfKey(System.Object)
  - System.Collections.SortedList.IndexOfValue(System.Object)
  - System.Collections.SortedList.IsFixedSize
  - System.Collections.SortedList.IsReadOnly
  - System.Collections.SortedList.IsSynchronized
  - System.Collections.SortedList.Item(System.Object)
  - System.Collections.SortedList.Keys
  - System.Collections.SortedList.Remove(System.Object)
  - System.Collections.SortedList.RemoveAt(System.Int32)
  - System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  - System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  - System.Collections.SortedList.SyncRoot
  - System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.SortedList.TrimToSize
  - System.Collections.SortedList.Values
  langs:
  - csharp
  - vb
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SortedList
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 60
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.</p>\n"
  syntax:
    content: >-
      [DebuggerTypeProxy(typeof (SortedList.SortedListDebugView))]

      [DebuggerDisplay("Count = {Count}")]

      [ComVisible(true)]

      [Obsolete("Non-generic collections have been deprecated. Please use collections in System.Collections.Generic.")]

      [Serializable]

      public class SortedList : IDictionary, ICollection, IEnumerable, ICloneable
    content.vb: >-
      <DebuggerTypeProxy(GetType(SortedList.SortedListDebugView))>

      <DebuggerDisplay("Count = {Count}")>

      <ComVisible(True)>

      <Obsolete("Non-generic collections have been deprecated. Please use collections in System.Collections.Generic.")>

      <Serializable>

      Public Class SortedList
          Implements IDictionary, ICollection, IEnumerable, ICloneable
  seealso:
  - linkId: System.IComparable
    commentId: T:System.IComparable
  - linkId: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - linkId: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - linkId: System.Collections.Hashtable
    commentId: T:System.Collections.Hashtable
  - linkId: System.Collections.Generic.SortedList`2
    commentId: T:System.Collections.Generic.SortedList`2
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Collections.SortedList.#ctor
  commentId: M:System.Collections.SortedList.#ctor
  id: '#ctor'
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 89
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the default initial capacity, and is sorted according to the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface implemented by each key added to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public SortedList()
    content.vb: Public Sub New
  seealso:
  - linkId: System.IComparable
    commentId: T:System.IComparable
  - linkId: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  commentId: M:System.Collections.SortedList.#ctor(System.Collections.IComparer)
  id: '#ctor(System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(System.Collections.IComparer)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 126
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the default initial capacity, and is sorted according to the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: public SortedList(IComparer comparer)
    content.vb: Public Sub New(comparer As IComparer)
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing keys.</p>\n<p>-or- </p>\n<p>\n<strong>null</strong> to use the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each key. </p>\n"
  seealso:
  - linkId: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - linkId: System.IComparable
    commentId: T:System.IComparable
  - linkId: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  commentId: M:System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  id: '#ctor(System.Collections.IComparer,System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: SortedList(IComparer, Int32)
  nameWithType: SortedList.SortedList(IComparer, Int32)
  fullName: System.Collections.SortedList.SortedList(System.Collections.IComparer, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 140
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the specified initial capacity, and is sorted according to the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: public SortedList(IComparer comparer, int capacity)
    content.vb: Public Sub New(comparer As IComparer, capacity As Integer)
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing keys.</p>\n<p>-or- </p>\n<p>\n<strong>null</strong> to use the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each key. </p>\n"
    - id: capacity
      type: System.Int32
      description: "\n<p>The initial number of elements that the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object can contain. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is not enough available memory to create a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object with the specified <em>capacity</em>.</p>\n"
  seealso:
  - linkId: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - linkId: System.IComparable
    commentId: T:System.IComparable
  - linkId: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  commentId: M:System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(System.Collections.IDictionary)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 151
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface implemented by each key.</p>\n"
  syntax:
    content: public SortedList(IDictionary d)
    content.vb: Public Sub New(d As IDictionary)
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "\n<p>The <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> implementation to copy to a new <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>d</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>One or more elements in <em>d</em> do not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
  seealso:
  - linkId: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - linkId: System.IComparable
    commentId: T:System.IComparable
  - linkId: System.Collections.Hashtable
    commentId: T:System.Collections.Hashtable
  - linkId: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  commentId: M:System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: SortedList(IDictionary, IComparer)
  nameWithType: SortedList.SortedList(IDictionary, IComparer)
  fullName: System.Collections.SortedList.SortedList(System.Collections.IDictionary, System.Collections.IComparer)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 163
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: public SortedList(IDictionary d, IComparer comparer)
    content.vb: Public Sub New(d As IDictionary, comparer As IComparer)
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "\n<p>The <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> implementation to copy to a new <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing keys.</p>\n<p>-or- </p>\n<p>\n<strong>null</strong> to use the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each key. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>d</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and one or more elements in <em>d</em> do not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
  seealso:
  - linkId: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - linkId: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - linkId: System.IComparable
    commentId: T:System.IComparable
  - linkId: System.Collections.Hashtable
    commentId: T:System.Collections.Hashtable
  - linkId: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.SortedList.#ctor(System.Int32)
  commentId: M:System.Collections.SortedList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 107
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the specified initial capacity, and is sorted according to the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface implemented by each key added to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public SortedList(int initialCapacity)
    content.vb: Public Sub New(initialCapacity As Integer)
    parameters:
    - id: initialCapacity
      type: System.Int32
      description: "\n<p>The initial number of elements that the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object can contain. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>initialCapacity</em> is less than zero. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is not enough available memory to create a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object with the specified <em>initialCapacity</em>.</p>\n"
  seealso:
  - linkId: System.IComparable
    commentId: T:System.IComparable
  - linkId: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.SortedList.Capacity
  commentId: P:System.Collections.SortedList.Capacity
  id: Capacity
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Capacity
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 192
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets or sets the capacity of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual int Capacity { get; set; }
    content.vb: Public Overridable Property Capacity As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of elements that the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object can contain.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value assigned is less than the current number of elements in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is not enough memory available on the system.</p>\n"
  seealso:
  - linkId: System.Collections.SortedList.TrimToSize
    commentId: M:System.Collections.SortedList.TrimToSize
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.Count
  commentId: P:System.Collections.SortedList.Count
  id: Count
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Count
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 225
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the number of elements contained in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual int Count { get; }
    content.vb: Public Overridable ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of elements contained in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - linkId: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.SortedList.IsFixedSize
  commentId: P:System.Collections.SortedList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsFixedSize
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 256
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object has a fixed size.</p>\n"
  syntax:
    content: public virtual bool IsFixedSize { get; }
    content.vb: Public Overridable ReadOnly Property IsFixedSize As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object has a fixed size; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IDictionary.IsFixedSize
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.SortedList.IsReadOnly
  commentId: P:System.Collections.SortedList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsReadOnly
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 252
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    content.vb: Public Overridable ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is read-only; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IDictionary.IsReadOnly
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.SortedList.IsSynchronized
  commentId: P:System.Collections.SortedList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsSynchronized
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 261
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether access to a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is synchronized (thread safe).</p>\n"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    content.vb: Public Overridable ReadOnly Property IsSynchronized As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if access to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is synchronized (thread safe); otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Collections.SortedList.SyncRoot
    commentId: P:System.Collections.SortedList.SyncRoot
  - linkId: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
    commentId: M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.SortedList.Item(System.Object)
  commentId: P:System.Collections.SortedList.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Item[Object]
  nameWithType: SortedList.Item[Object]
  fullName: System.Collections.SortedList.Item[System.Object]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: this[]
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 437
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets and sets the value associated with a specific key in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual object this[object key] { get; set; }
    content.vb: Public Overridable Property Item(key As Object) As Object
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key associated with the value to get or set. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The value associated with the <em>key</em> parameter in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object, if <em>key</em> is found; otherwise, <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The property is set and the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n<p>-or- </p>\n<p>The property is set, <em>key</em> does not exist in the collection, and the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is not enough available memory to add the element to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The comparer throws an exception. </p>\n"
  seealso:
  - linkId: System.Collections.SortedList.Add(System.Object,System.Object)
    commentId: M:System.Collections.SortedList.Add(System.Object,System.Object)
  - linkId: System.Collections.SortedList.Contains(System.Object)
    commentId: M:System.Collections.SortedList.Contains(System.Object)
  - linkId: System.Collections.SortedList.ContainsKey(System.Object)
    commentId: M:System.Collections.SortedList.ContainsKey(System.Object)
  implements:
  - System.Collections.IDictionary.Item(System.Object)
  nameWithType.vb: SortedList.Item(Object)
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Collections.SortedList.Item(System.Object)
  name.vb: Item(Object)
- uid: System.Collections.SortedList.Keys
  commentId: P:System.Collections.SortedList.Keys
  id: Keys
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Keys
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 235
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the keys in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual ICollection Keys { get; }
    content.vb: Public Overridable ReadOnly Property Keys As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the keys in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - linkId: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - linkId: System.Collections.SortedList.Values
    commentId: P:System.Collections.SortedList.Values
  - linkId: System.Collections.SortedList.GetKeyList
    commentId: M:System.Collections.SortedList.GetKeyList
  implements:
  - System.Collections.IDictionary.Keys
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.SortedList.SyncRoot
  commentId: P:System.Collections.SortedList.SyncRoot
  id: SyncRoot
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SyncRoot
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 266
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an object that can be used to synchronize access to a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual object SyncRoot { get; }
    content.vb: Public Overridable ReadOnly Property SyncRoot As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An object that can be used to synchronize access to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - linkId: System.Collections.SortedList.IsSynchronized
    commentId: P:System.Collections.SortedList.IsSynchronized
  - linkId: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
    commentId: M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.SortedList.Values
  commentId: P:System.Collections.SortedList.Values
  id: Values
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Values
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 245
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the values in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual ICollection Values { get; }
    content.vb: Public Overridable ReadOnly Property Values As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the values in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - linkId: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - linkId: System.Collections.SortedList.Keys
    commentId: P:System.Collections.SortedList.Keys
  - linkId: System.Collections.SortedList.GetValueList
    commentId: M:System.Collections.SortedList.GetValueList
  implements:
  - System.Collections.IDictionary.Values
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  commentId: M:System.Collections.SortedList.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Add(Object, Object)
  nameWithType: SortedList.Add(Object, Object)
  fullName: System.Collections.SortedList.Add(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Add
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 177
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Adds an element with the specified key and value to a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual void Add(object key, object value)
    content.vb: Public Overridable Sub Add(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the element to add. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value of the element to add. The value can be <strong>null</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element with the specified <em>key</em> already exists in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> is set to use the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface, and <em>key</em> does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is not enough available memory to add the element to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The comparer throws an exception. </p>\n"
  seealso:
  - linkId: System.Collections.SortedList.Item(System.Object)
    commentId: P:System.Collections.SortedList.Item(System.Object)
  - linkId: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - linkId: System.IComparable
    commentId: T:System.IComparable
  - linkId: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  implements:
  - System.Collections.IDictionary.Add(System.Object,System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.Clear
  commentId: M:System.Collections.SortedList.Clear
  id: Clear
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clear
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 276
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes all elements from a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual void Clear()
    content.vb: Public Overridable Sub Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - linkId: System.Collections.SortedList.TrimToSize
    commentId: M:System.Collections.SortedList.TrimToSize
  - linkId: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  - linkId: System.Collections.SortedList.Count
    commentId: P:System.Collections.SortedList.Count
  implements:
  - System.Collections.IDictionary.Clear
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.Clone
  commentId: M:System.Collections.SortedList.Clone
  id: Clone
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clone
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 288
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Creates a shallow copy of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual object Clone()
    content.vb: Public Overridable Function Clone As Object
    return:
      type: System.Object
      description: "\n<p>A shallow copy of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - linkId: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
    commentId: M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.Contains(System.Object)
  commentId: M:System.Collections.SortedList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Contains
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 303
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Determines whether a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object contains a specific key.</p>\n"
  syntax:
    content: public virtual bool Contains(object key)
    content.vb: Public Overridable Function Contains(key As Object) As Boolean
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key to locate in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object contains an element with the specified <em>key</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The comparer throws an exception. </p>\n"
  seealso:
  - linkId: System.Collections.SortedList.ContainsKey(System.Object)
    commentId: M:System.Collections.SortedList.ContainsKey(System.Object)
  - linkId: System.Collections.SortedList.IndexOfKey(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)
  implements:
  - System.Collections.IDictionary.Contains(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  commentId: M:System.Collections.SortedList.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContainsKey
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 309
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Determines whether a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object contains a specific key.</p>\n"
  syntax:
    content: public virtual bool ContainsKey(object key)
    content.vb: Public Overridable Function ContainsKey(key As Object) As Boolean
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key to locate in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object contains an element with the specified <em>key</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The comparer throws an exception. </p>\n"
  seealso:
  - linkId: System.Collections.SortedList.Contains(System.Object)
    commentId: M:System.Collections.SortedList.Contains(System.Object)
  - linkId: System.Collections.SortedList.ContainsValue(System.Object)
    commentId: M:System.Collections.SortedList.ContainsValue(System.Object)
  - linkId: System.Collections.SortedList.IndexOfKey(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  commentId: M:System.Collections.SortedList.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContainsValue
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 320
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Determines whether a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object contains a specific value.</p>\n"
  syntax:
    content: public virtual bool ContainsValue(object value)
    content.vb: Public Overridable Function ContainsValue(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The value to locate in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. The value can be <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object contains an element with the specified <em>value</em>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Collections.SortedList.ContainsKey(System.Object)
    commentId: M:System.Collections.SortedList.ContainsKey(System.Object)
  - linkId: System.Collections.SortedList.IndexOfValue(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfValue(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  nameWithType: SortedList.CopyTo(Array, Int32)
  fullName: System.Collections.SortedList.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 325
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> elements to a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> object, starting at the specified index in the array.</p>\n"
  syntax:
    content: public virtual void CopyTo(Array array, int arrayIndex)
    content.vb: Public Overridable Sub CopyTo(array As Array, arrayIndex As Integer)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> object that is the destination of the <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref> objects copied from <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing. </p>\n"
    - id: arrayIndex
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>arrayIndex</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or- </p>\n<p>The number of elements in the source <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\n"
  seealso:
  - linkId: System.Array
    commentId: T:System.Array
  - linkId: System.Collections.DictionaryEntry
    commentId: T:System.Collections.DictionaryEntry
  - linkId: System.Collections.SortedList.GetEnumerator
    commentId: M:System.Collections.SortedList.GetEnumerator
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  commentId: M:System.Collections.SortedList.GetByIndex(System.Int32)
  id: GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetByIndex
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 368
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the value at the specified index of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual object GetByIndex(int index)
    content.vb: Public Overridable Function GetByIndex(index As Integer) As Object
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the value to get. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The value at the specified index of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  seealso:
  - linkId: System.Collections.SortedList.IndexOfKey(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)
  - linkId: System.Collections.SortedList.IndexOfValue(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfValue(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.GetEnumerator
  commentId: M:System.Collections.SortedList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnumerator
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 389
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object that iterates through a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual IDictionaryEnumerator GetEnumerator()
    content.vb: Public Overridable Function GetEnumerator As IDictionaryEnumerator
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object for the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - linkId: System.Collections.IDictionaryEnumerator
    commentId: T:System.Collections.IDictionaryEnumerator
  - linkId: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IDictionary.GetEnumerator
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.GetKey(System.Int32)
  commentId: M:System.Collections.SortedList.GetKey(System.Int32)
  id: GetKey(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetKey
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 395
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the key at the specified index of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual object GetKey(int index)
    content.vb: Public Overridable Function GetKey(index As Integer) As Object
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the key to get. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The key at the specified index of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.GetKeyList
  commentId: M:System.Collections.SortedList.GetKeyList
  id: GetKeyList
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetKeyList
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 413
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the keys in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual IList GetKeyList()
    content.vb: Public Overridable Function GetKeyList As IList
    return:
      type: System.Collections.IList
      description: "\n<p>An <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> object containing the keys in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - linkId: System.Collections.IList
    commentId: T:System.Collections.IList
  - linkId: System.Collections.SortedList.GetValueList
    commentId: M:System.Collections.SortedList.GetValueList
  - linkId: System.Collections.SortedList.Keys
    commentId: P:System.Collections.SortedList.Keys
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.GetValueList
  commentId: M:System.Collections.SortedList.GetValueList
  id: GetValueList
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValueList
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 429
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the values in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual IList GetValueList()
    content.vb: Public Overridable Function GetValueList As IList
    return:
      type: System.Collections.IList
      description: "\n<p>An <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> object containing the values in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - linkId: System.Collections.IList
    commentId: T:System.Collections.IList
  - linkId: System.Collections.SortedList.GetKeyList
    commentId: M:System.Collections.SortedList.GetKeyList
  - linkId: System.Collections.SortedList.Values
    commentId: P:System.Collections.SortedList.Values
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)
  id: IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOfKey
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 463
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns the zero-based index of the specified key in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual int IndexOfKey(object key)
    content.vb: Public Overridable Function IndexOfKey(key As Object) As Integer
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key to locate in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the <em>key</em> parameter, if <em>key</em> is found in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The comparer throws an exception. </p>\n"
  seealso:
  - linkId: System.Collections.SortedList.ContainsKey(System.Object)
    commentId: M:System.Collections.SortedList.ContainsKey(System.Object)
  - linkId: System.Collections.SortedList.IndexOfValue(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfValue(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  commentId: M:System.Collections.SortedList.IndexOfValue(System.Object)
  id: IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOfValue
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 477
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns the zero-based index of the first occurrence of the specified value in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual int IndexOfValue(object value)
    content.vb: Public Overridable Function IndexOfValue(value As Object) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The value to locate in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. The value can be <strong>null</strong>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of the <em>value</em> parameter, if <em>value</em> is found in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object; otherwise, -1.</p>\n"
  seealso:
  - linkId: System.Collections.SortedList.ContainsValue(System.Object)
    commentId: M:System.Collections.SortedList.ContainsValue(System.Object)
  - linkId: System.Collections.SortedList.IndexOfKey(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.Remove(System.Object)
  commentId: M:System.Collections.SortedList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Remove
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 514
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes the element with the specified key from a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual void Remove(object key)
    content.vb: Public Overridable Sub Remove(key As Object)
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the element to remove. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - linkId: System.Collections.SortedList.RemoveAt(System.Int32)
    commentId: M:System.Collections.SortedList.RemoveAt(System.Int32)
  implements:
  - System.Collections.IDictionary.Remove(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  commentId: M:System.Collections.SortedList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RemoveAt
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 497
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes the element at the specified index of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual void RemoveAt(int index)
    content.vb: Public Overridable Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to remove. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - linkId: System.Collections.SortedList.Remove(System.Object)
    commentId: M:System.Collections.SortedList.Remove(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  commentId: M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  id: SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: SetByIndex(Int32, Object)
  nameWithType: SortedList.SetByIndex(Int32, Object)
  fullName: System.Collections.SortedList.SetByIndex(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetByIndex
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 523
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Replaces the value at a specific index in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual void SetByIndex(int index, object value)
    content.vb: Public Overridable Sub SetByIndex(index As Integer, value As Object)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which to save <em>value</em>. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to save into the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. The value can be <strong>null</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  seealso:
  - linkId: System.Collections.SortedList.IndexOfKey(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)
  - linkId: System.Collections.SortedList.IndexOfValue(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfValue(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  commentId: M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  id: Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Synchronized
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 532
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns a synchronized (thread-safe) wrapper for a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: >-
      [HostProtection(Synchronization = true)]

      public static SortedList Synchronized(SortedList list)
    content.vb: >-
      <HostProtection(Synchronization:=True)>

      Public Shared Function Synchronized(list As SortedList) As SortedList
    parameters:
    - id: list
      type: System.Collections.SortedList
      description: "\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object to synchronize. </p>\n"
    return:
      type: System.Collections.SortedList
      description: "\n<p>A synchronized (thread-safe) wrapper for the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>list</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Collections.SortedList.IsSynchronized
    commentId: P:System.Collections.SortedList.IsSynchronized
  - linkId: System.Collections.SortedList.SyncRoot
    commentId: P:System.Collections.SortedList.SyncRoot
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: SortedList.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 380
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> that iterates through the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Collections.IDictionaryEnumerator
    commentId: T:System.Collections.IDictionaryEnumerator
  - linkId: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: SortedList.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.SortedList.TrimToSize
  commentId: M:System.Collections.SortedList.TrimToSize
  id: TrimToSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TrimToSize
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 549
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Sets the capacity to the actual number of elements in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual void TrimToSize()
    content.vb: Public Overridable Sub TrimToSize
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - linkId: System.Collections.SortedList.Clear
    commentId: M:System.Collections.SortedList.Clear
  - linkId: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  - linkId: System.Collections.SortedList.Count
    commentId: P:System.Collections.SortedList.Count
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IDictionary
  commentId: T:System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  parent: System.Linq.ParallelEnumerable
  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  name: AsParallel()
  nameWithType: ParallelEnumerable.AsParallel()
  fullName: System.Linq.ParallelEnumerable.AsParallel()
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  name: Cast<TResult>()
  nameWithType: Enumerable.Cast<TResult>()
  fullName: System.Linq.Enumerable.Cast<TResult>()
  nameWithType.vb: Enumerable.Cast(Of TResult)()
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast<TResult>
    nameWithType: Enumerable.Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast(Of TResult)
    nameWithType: Enumerable.Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  name: OfType<TResult>()
  nameWithType: Enumerable.OfType<TResult>()
  fullName: System.Linq.Enumerable.OfType<TResult>()
  nameWithType.vb: Enumerable.OfType(Of TResult)()
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType<TResult>
    nameWithType: Enumerable.OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType(Of TResult)
    nameWithType: Enumerable.OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  parent: System.Linq.Queryable
  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  name: AsQueryable()
  nameWithType: Queryable.AsQueryable()
  fullName: System.Linq.Queryable.AsQueryable()
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  isExternal: true
  name: AsParallel(IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.ParallelEnumerable
  commentId: T:System.Linq.ParallelEnumerable
  parent: System.Linq
  isExternal: false
  name: ParallelEnumerable
  nameWithType: ParallelEnumerable
  fullName: System.Linq.ParallelEnumerable
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  isExternal: true
  name: Cast<TResult>(IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)
  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)
  name.vb: Cast(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast<TResult>
    nameWithType: Enumerable.Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast(Of TResult)
    nameWithType: Enumerable.Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Enumerable
  commentId: T:System.Linq.Enumerable
  parent: System.Linq
  isExternal: false
  name: Enumerable
  nameWithType: Enumerable
  fullName: System.Linq.Enumerable
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  isExternal: true
  name: OfType<TResult>(IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)
  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)
  name.vb: OfType(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType<TResult>
    nameWithType: Enumerable.OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType(Of TResult)
    nameWithType: Enumerable.OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  isExternal: true
  name: AsQueryable(IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Queryable
  commentId: T:System.Linq.Queryable
  parent: System.Linq
  isExternal: false
  name: Queryable
  nameWithType: Queryable
  fullName: System.Linq.Queryable
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Collections.IComparer
  commentId: T:System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ICollection.Count
  commentId: P:System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  nameWithType: ICollection.Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.IDictionary.IsFixedSize
  commentId: P:System.Collections.IDictionary.IsFixedSize
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsFixedSize
  nameWithType: IDictionary.IsFixedSize
  fullName: System.Collections.IDictionary.IsFixedSize
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.IDictionary.IsReadOnly
  commentId: P:System.Collections.IDictionary.IsReadOnly
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsReadOnly
  nameWithType: IDictionary.IsReadOnly
  fullName: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  nameWithType: ICollection.IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.IDictionary.Item(System.Object)
  commentId: P:System.Collections.IDictionary.Item(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Item[Object]
  nameWithType: IDictionary.Item[Object]
  fullName: System.Collections.IDictionary.Item[System.Object]
  nameWithType.vb: IDictionary.Item(Object)
  fullname.vb: System.Collections.IDictionary.Item(System.Object)
  name.vb: Item(Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    nameWithType: IDictionary.Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    nameWithType: IDictionary.Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IDictionary.Keys
  commentId: P:System.Collections.IDictionary.Keys
  parent: System.Collections.IDictionary
  isExternal: true
  name: Keys
  nameWithType: IDictionary.Keys
  fullName: System.Collections.IDictionary.Keys
- uid: System.Collections.ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  nameWithType: ICollection.SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.IDictionary.Values
  commentId: P:System.Collections.IDictionary.Values
  parent: System.Collections.IDictionary
  isExternal: true
  name: Values
  nameWithType: IDictionary.Values
  fullName: System.Collections.IDictionary.Values
- uid: System.Collections.IDictionary.Add(System.Object,System.Object)
  commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Add(Object, Object)
  nameWithType: IDictionary.Add(Object, Object)
  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    nameWithType: IDictionary.Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    nameWithType: IDictionary.Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IDictionary.Clear
  commentId: M:System.Collections.IDictionary.Clear
  parent: System.Collections.IDictionary
  isExternal: true
  name: Clear()
  nameWithType: IDictionary.Clear()
  fullName: System.Collections.IDictionary.Clear()
  spec.csharp:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    nameWithType: IDictionary.Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    nameWithType: IDictionary.Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IDictionary.Contains(System.Object)
  commentId: M:System.Collections.IDictionary.Contains(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Contains(Object)
  nameWithType: IDictionary.Contains(Object)
  fullName: System.Collections.IDictionary.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    nameWithType: IDictionary.Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    nameWithType: IDictionary.Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  nameWithType: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.IDictionary.GetEnumerator
  commentId: M:System.Collections.IDictionary.GetEnumerator
  parent: System.Collections.IDictionary
  isExternal: true
  name: GetEnumerator()
  nameWithType: IDictionary.GetEnumerator()
  fullName: System.Collections.IDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: GetEnumerator
    nameWithType: IDictionary.GetEnumerator
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: GetEnumerator
    nameWithType: IDictionary.GetEnumerator
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IDictionaryEnumerator
  commentId: T:System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.IDictionary.Remove(System.Object)
  commentId: M:System.Collections.IDictionary.Remove(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Remove(Object)
  nameWithType: IDictionary.Remove(Object)
  fullName: System.Collections.IDictionary.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    nameWithType: IDictionary.Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    nameWithType: IDictionary.Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.SortedList
  commentId: T:System.Collections.SortedList
  parent: System.Collections
  isExternal: false
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  commentId: T:System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  nameWithType: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidCastException
  commentId: T:System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  nameWithType: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
