items:
- uid: System.Net.NetworkInformation.PingReply
  commentId: T:System.Net.NetworkInformation.PingReply
  id: PingReply
  parent: System.Net.NetworkInformation
  children:
  - System.Net.NetworkInformation.PingReply.Address
  - System.Net.NetworkInformation.PingReply.Buffer
  - System.Net.NetworkInformation.PingReply.Options
  - System.Net.NetworkInformation.PingReply.RoundtripTime
  - System.Net.NetworkInformation.PingReply.Status
  langs:
  - csharp
  - vb
  name: PingReply
  fullName: System.Net.NetworkInformation.PingReply
  type: Class
  source:
    remote:
      path: src/System.Net.Ping/src/System/Net/NetworkInformation/PingReply.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PingReply
    path: src/System.Net.Ping/src/System/Net/NetworkInformation/PingReply.cs
    startLine: 6
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides information about the status and data resulting from a <xref href=\"System.Net.NetworkInformation.Ping.Send\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.NetworkInformation.Ping.SendAsync\" data-throw-if-not-resolved=\"false\"></xref> operation.</p>\n"
  syntax:
    content: public class PingReply
    content.vb: Public Class PingReply
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: PingReply
- uid: System.Net.NetworkInformation.PingReply.Address
  commentId: P:System.Net.NetworkInformation.PingReply.Address
  id: Address
  parent: System.Net.NetworkInformation.PingReply
  langs:
  - csharp
  - vb
  name: Address
  fullName: System.Net.NetworkInformation.PingReply.Address
  type: Property
  source:
    remote:
      path: src/System.Net.Ping/src/System/Net/NetworkInformation/PingReply.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Address
    path: src/System.Net.Ping/src/System/Net/NetworkInformation/PingReply.cs
    startLine: 30
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the address of the host that sends the Internet Control Message Protocol (ICMP) echo reply.</p>\n"
  syntax:
    content: public IPAddress Address { get; }
    content.vb: Public ReadOnly Property Address As IPAddress
    parameters: []
    return:
      type: IPAddress
      description: "\n<p>An <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> containing the destination for the ICMP echo message.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: PingReply.Address
- uid: System.Net.NetworkInformation.PingReply.Buffer
  commentId: P:System.Net.NetworkInformation.PingReply.Buffer
  id: Buffer
  parent: System.Net.NetworkInformation.PingReply
  langs:
  - csharp
  - vb
  name: Buffer
  fullName: System.Net.NetworkInformation.PingReply.Buffer
  type: Property
  source:
    remote:
      path: src/System.Net.Ping/src/System/Net/NetworkInformation/PingReply.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Buffer
    path: src/System.Net.Ping/src/System/Net/NetworkInformation/PingReply.cs
    startLine: 36
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the buffer of data received in an Internet Control Message Protocol (ICMP) echo reply message.</p>\n"
  syntax:
    content: public byte[] Buffer { get; }
    content.vb: Public ReadOnly Property Buffer As Byte()
    parameters: []
    return:
      type: System.Byte[]
      description: "\n<p>A <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array containing the data received in an ICMP echo reply message, or an empty array, if no reply was received.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: PingReply.Buffer
- uid: System.Net.NetworkInformation.PingReply.Options
  commentId: P:System.Net.NetworkInformation.PingReply.Options
  id: Options
  parent: System.Net.NetworkInformation.PingReply
  langs:
  - csharp
  - vb
  name: Options
  fullName: System.Net.NetworkInformation.PingReply.Options
  type: Property
  source:
    remote:
      path: src/System.Net.Ping/src/System/Net/NetworkInformation/PingReply.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Options
    path: src/System.Net.Ping/src/System/Net/NetworkInformation/PingReply.cs
    startLine: 34
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the options used to transmit the reply to an Internet Control Message Protocol (ICMP) echo request.</p>\n"
  syntax:
    content: public PingOptions Options { get; }
    content.vb: Public ReadOnly Property Options As PingOptions
    parameters: []
    return:
      type: System.Net.NetworkInformation.PingOptions
      description: "\n<p>A <xref href=\"System.Net.NetworkInformation.PingOptions\" data-throw-if-not-resolved=\"false\"></xref> object that contains the Time to Live (TTL) and the fragmentation directive used for transmitting the reply if <xref href=\"System.Net.NetworkInformation.PingReply.Status\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Net.NetworkInformation.IPStatus.Success\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: PingReply.Options
- uid: System.Net.NetworkInformation.PingReply.RoundtripTime
  commentId: P:System.Net.NetworkInformation.PingReply.RoundtripTime
  id: RoundtripTime
  parent: System.Net.NetworkInformation.PingReply
  langs:
  - csharp
  - vb
  name: RoundtripTime
  fullName: System.Net.NetworkInformation.PingReply.RoundtripTime
  type: Property
  source:
    remote:
      path: src/System.Net.Ping/src/System/Net/NetworkInformation/PingReply.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RoundtripTime
    path: src/System.Net.Ping/src/System/Net/NetworkInformation/PingReply.cs
    startLine: 32
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the number of milliseconds taken to send an Internet Control Message Protocol (ICMP) echo request and receive the corresponding ICMP echo reply message.</p>\n"
  syntax:
    content: public long RoundtripTime { get; }
    content.vb: Public ReadOnly Property RoundtripTime As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>An <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> that specifies the round trip time, in milliseconds.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: PingReply.RoundtripTime
- uid: System.Net.NetworkInformation.PingReply.Status
  commentId: P:System.Net.NetworkInformation.PingReply.Status
  id: Status
  parent: System.Net.NetworkInformation.PingReply
  langs:
  - csharp
  - vb
  name: Status
  fullName: System.Net.NetworkInformation.PingReply.Status
  type: Property
  source:
    remote:
      path: src/System.Net.Ping/src/System/Net/NetworkInformation/PingReply.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Status
    path: src/System.Net.Ping/src/System/Net/NetworkInformation/PingReply.cs
    startLine: 28
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the status of an attempt to send an Internet Control Message Protocol (ICMP) echo request and receive the corresponding ICMP echo reply message.</p>\n"
  syntax:
    content: public IPStatus Status { get; }
    content.vb: Public ReadOnly Property Status As IPStatus
    parameters: []
    return:
      type: System.Net.NetworkInformation.IPStatus
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.IPStatus\" data-throw-if-not-resolved=\"false\"></xref> value indicating the result of the request.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: PingReply.Status
references:
- uid: System.Net.NetworkInformation
  isExternal: false
  name: System.Net.NetworkInformation
  fullName: System.Net.NetworkInformation
  nameWithType: System.Net.NetworkInformation
  commentId: N:System.Net.NetworkInformation
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  fullName: System.Net.IPAddress
  nameWithType: IPAddress
  commentId: T:System.Net.IPAddress
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
  nameWithType: System.Net
  commentId: N:System.Net
- uid: System.Byte[]
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  nameWithType: Byte[]
  nameWithType.vb: Byte()
- uid: System.Net.NetworkInformation.PingOptions
  parent: System.Net.NetworkInformation
  isExternal: false
  name: PingOptions
  fullName: System.Net.NetworkInformation.PingOptions
  nameWithType: PingOptions
  commentId: T:System.Net.NetworkInformation.PingOptions
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
  nameWithType: Int64
  commentId: T:System.Int64
- uid: System.Net.NetworkInformation.IPStatus
  parent: System.Net.NetworkInformation
  isExternal: false
  name: IPStatus
  fullName: System.Net.NetworkInformation.IPStatus
  nameWithType: IPStatus
  commentId: T:System.Net.NetworkInformation.IPStatus
