### YamlMime:ManagedReference
items:
- uid: System.Dynamic.DynamicObject
  commentId: T:System.Dynamic.DynamicObject
  id: DynamicObject
  parent: System.Dynamic
  children:
  - System.Dynamic.DynamicObject.#ctor
  - System.Dynamic.DynamicObject.GetDynamicMemberNames
  - System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  - System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)
  - System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)
  - System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)
  - System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])
  - System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)
  - System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)
  - System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)
  - System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)
  - System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)
  - System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)
  - System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)
  - System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)
  langs:
  - csharp
  - vb
  name: DynamicObject
  nameWithType: DynamicObject
  fullName: System.Dynamic.DynamicObject
  type: Class
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DynamicObject
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 113
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.</p>\n"
  syntax:
    content: 'public class DynamicObject : IDynamicMetaObjectProvider'
    content.vb: >-
      Public Class DynamicObject
          Implements IDynamicMetaObjectProvider
  inheritance:
  - System.Object
  implements:
  - System.Dynamic.IDynamicMetaObjectProvider
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Dynamic.DynamicObject.#ctor
  commentId: M:System.Dynamic.DynamicObject.#ctor
  id: '#ctor'
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: DynamicObject()
  nameWithType: DynamicObject.DynamicObject()
  fullName: System.Dynamic.DynamicObject.DynamicObject()
  type: Constructor
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 115
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Enables derived types to initialize a new instance of the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  syntax:
    content: protected DynamicObject()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Dynamic.DynamicObject.GetDynamicMemberNames
  commentId: M:System.Dynamic.DynamicObject.GetDynamicMemberNames
  id: GetDynamicMemberNames
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: GetDynamicMemberNames()
  nameWithType: DynamicObject.GetDynamicMemberNames()
  fullName: System.Dynamic.DynamicObject.GetDynamicMemberNames()
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDynamicMemberNames
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 116
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Returns the enumeration of all dynamic member names. </p>\n"
  syntax:
    content: public virtual IEnumerable<string> GetDynamicMemberNames()
    content.vb: Public Overridable Function GetDynamicMemberNames As IEnumerable(Of String)
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "\n<p>A sequence that contains dynamic member names.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  commentId: M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  id: GetMetaObject(System.Linq.Expressions.Expression)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: GetMetaObject(Expression)
  nameWithType: DynamicObject.GetMetaObject(Expression)
  fullName: System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMetaObject
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 117
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides a <xref href=\"System.Dynamic.DynamicMetaObject\" data-throw-if-not-resolved=\"false\"></xref> that dispatches to the dynamic virtual methods. The object can be encapsulated inside another <xref href=\"System.Dynamic.DynamicMetaObject\" data-throw-if-not-resolved=\"false\"></xref> to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public virtual DynamicMetaObject GetMetaObject(Expression parameter)
    content.vb: Public Overridable Function GetMetaObject(parameter As Expression) As DynamicMetaObject
    parameters:
    - id: parameter
      type: System.Linq.Expressions.Expression
      description: "\n<p>The expression that represents <xref href=\"System.Dynamic.DynamicMetaObject\" data-throw-if-not-resolved=\"false\"></xref> to dispatch to the dynamic virtual methods.</p>\n"
    return:
      type: System.Dynamic.DynamicMetaObject
      description: "\n<p>An object of the <xref href=\"System.Dynamic.DynamicMetaObject\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  implements:
  - System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)
  commentId: M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)
  id: TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryBinaryOperation(BinaryOperationBinder, Object, out Object)
  nameWithType: DynamicObject.TryBinaryOperation(BinaryOperationBinder, Object, out Object)
  fullName: System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder, System.Object, out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryBinaryOperation
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 118
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides implementation for binary operations. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</p>\n"
  syntax:
    content: public virtual bool TryBinaryOperation(BinaryOperationBinder binder, object arg, out object result)
    content.vb: Public Overridable Function TryBinaryOperation(binder As BinaryOperationBinder, arg As Object, ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.BinaryOperationBinder
      description: "\n<p>Provides information about the binary operation. The <code>binder.Operation</code> property returns an <xref href=\"System.Linq.Expressions.ExpressionType\" data-throw-if-not-resolved=\"false\"></xref> object. For example, for the <code>sum = first + second</code> statement, where <code>first</code> and <code>second</code> are derived from the <strong>DynamicObject</strong> class, <code>binder.Operation</code> returns <code>ExpressionType.Add</code>.</p>\n"
    - id: arg
      type: System.Object
      description: "\n<p>The right operand for the binary operation. For example, for the <code>sum = first + second</code> statement, where <code>first</code> and <code>second</code> are derived from the <strong>DynamicObject</strong> class, <em>arg</em> is equal to <code>second</code>.</p>\n"
    - id: result
      type: System.Object
      description: "\n<p>The result of the binary operation.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n"
  nameWithType.vb: DynamicObject.TryBinaryOperation(BinaryOperationBinder, Object, ByRef Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder, System.Object, ByRef System.Object)
  name.vb: TryBinaryOperation(BinaryOperationBinder, Object, ByRef Object)
- uid: System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)
  commentId: M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)
  id: TryConvert(System.Dynamic.ConvertBinder,System.Object@)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryConvert(ConvertBinder, out Object)
  nameWithType: DynamicObject.TryConvert(ConvertBinder, out Object)
  fullName: System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder, out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryConvert
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 119
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides implementation for type conversion operations. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</p>\n"
  syntax:
    content: public virtual bool TryConvert(ConvertBinder binder, out object result)
    content.vb: Public Overridable Function TryConvert(binder As ConvertBinder, ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.ConvertBinder
      description: "\n<p>Provides information about the conversion operation. The <code>binder.Type</code> property provides the type to which the object must be converted. For example, for the statement <code>(String)sampleObject</code> in C# (<code>CType(sampleObject, Type)</code> in Visual Basic), where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class, <code>binder.Type</code> returns the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> type. The <code>binder.Explicit</code> property provides information about the kind of conversion that occurs. It returns <strong>true</strong> for explicit conversion and <strong>false</strong> for implicit conversion.</p>\n"
    - id: result
      type: System.Object
      description: "\n<p>The result of the type conversion operation.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n"
  nameWithType.vb: DynamicObject.TryConvert(ConvertBinder, ByRef Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder, ByRef System.Object)
  name.vb: TryConvert(ConvertBinder, ByRef Object)
- uid: System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)
  commentId: M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)
  id: TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryCreateInstance(CreateInstanceBinder, Object[], out Object)
  nameWithType: DynamicObject.TryCreateInstance(CreateInstanceBinder, Object[], out Object)
  fullName: System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder, System.Object[], out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryCreateInstance
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 120
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.</p>\n"
  syntax:
    content: public virtual bool TryCreateInstance(CreateInstanceBinder binder, object[] args, out object result)
    content.vb: Public Overridable Function TryCreateInstance(binder As CreateInstanceBinder, args As Object(), ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.CreateInstanceBinder
      description: "\n<p>Provides information about the initialization operation.</p>\n"
    - id: args
      type: System.Object[]
      description: "\n<p>The arguments that are passed to the object during initialization. For example, for the <code>new SampleType(100)</code> operation, where <code>SampleType</code> is the type derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class, <em>args[0]</em> is equal to 100.</p>\n"
    - id: result
      type: System.Object
      description: "\n<p>The result of the initialization.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n"
  nameWithType.vb: DynamicObject.TryCreateInstance(CreateInstanceBinder, Object(), ByRef Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder, System.Object(), ByRef System.Object)
  name.vb: TryCreateInstance(CreateInstanceBinder, Object(), ByRef Object)
- uid: System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])
  commentId: M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])
  id: TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryDeleteIndex(DeleteIndexBinder, Object[])
  nameWithType: DynamicObject.TryDeleteIndex(DeleteIndexBinder, Object[])
  fullName: System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder, System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryDeleteIndex
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 121
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.</p>\n"
  syntax:
    content: public virtual bool TryDeleteIndex(DeleteIndexBinder binder, object[] indexes)
    content.vb: Public Overridable Function TryDeleteIndex(binder As DeleteIndexBinder, indexes As Object()) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.DeleteIndexBinder
      description: "\n<p>Provides information about the deletion.</p>\n"
    - id: indexes
      type: System.Object[]
      description: "\n<p>The indexes to be deleted.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n"
  nameWithType.vb: DynamicObject.TryDeleteIndex(DeleteIndexBinder, Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder, System.Object())
  name.vb: TryDeleteIndex(DeleteIndexBinder, Object())
- uid: System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)
  commentId: M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)
  id: TryDeleteMember(System.Dynamic.DeleteMemberBinder)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryDeleteMember(DeleteMemberBinder)
  nameWithType: DynamicObject.TryDeleteMember(DeleteMemberBinder)
  fullName: System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryDeleteMember
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 122
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.</p>\n"
  syntax:
    content: public virtual bool TryDeleteMember(DeleteMemberBinder binder)
    content.vb: Public Overridable Function TryDeleteMember(binder As DeleteMemberBinder) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.DeleteMemberBinder
      description: "\n<p>Provides information about the deletion.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)
  commentId: M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)
  id: TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryGetIndex(GetIndexBinder, Object[], out Object)
  nameWithType: DynamicObject.TryGetIndex(GetIndexBinder, Object[], out Object)
  fullName: System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder, System.Object[], out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetIndex
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 123
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that get a value by index. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for indexing operations.</p>\n"
  syntax:
    content: public virtual bool TryGetIndex(GetIndexBinder binder, object[] indexes, out object result)
    content.vb: Public Overridable Function TryGetIndex(binder As GetIndexBinder, indexes As Object(), ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.GetIndexBinder
      description: "\n<p>Provides information about the operation. </p>\n"
    - id: indexes
      type: System.Object[]
      description: "\n<p>The indexes that are used in the operation. For example, for the <code>sampleObject[3]</code> operation in C# (<code>sampleObject(3)</code> in Visual Basic), where <code>sampleObject</code> is derived from the <strong>DynamicObject</strong> class, <em>indexes[0]</em> is equal to 3.</p>\n"
    - id: result
      type: System.Object
      description: "\n<p>The result of the index operation.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</p>\n"
  nameWithType.vb: DynamicObject.TryGetIndex(GetIndexBinder, Object(), ByRef Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder, System.Object(), ByRef System.Object)
  name.vb: TryGetIndex(GetIndexBinder, Object(), ByRef Object)
- uid: System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)
  commentId: M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)
  id: TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryGetMember(GetMemberBinder, out Object)
  nameWithType: DynamicObject.TryGetMember(GetMemberBinder, out Object)
  fullName: System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder, out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetMember
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 124
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that get member values. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</p>\n"
  syntax:
    content: public virtual bool TryGetMember(GetMemberBinder binder, out object result)
    content.vb: Public Overridable Function TryGetMember(binder As GetMemberBinder, ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.GetMemberBinder
      description: "\n<p>Provides information about the object that called the dynamic operation. The <code>binder.Name</code> property provides the name of the member on which the dynamic operation is performed. For example, for the <code>Console.WriteLine(sampleObject.SampleProperty)</code> statement, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class, <code>binder.Name</code> returns \"SampleProperty\". The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.</p>\n"
    - id: result
      type: System.Object
      description: "\n<p>The result of the get operation. For example, if the method is called for a property, you can assign the property value to <em>result</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</p>\n"
  nameWithType.vb: DynamicObject.TryGetMember(GetMemberBinder, ByRef Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder, ByRef System.Object)
  name.vb: TryGetMember(GetMemberBinder, ByRef Object)
- uid: System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)
  commentId: M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)
  id: TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryInvoke(InvokeBinder, Object[], out Object)
  nameWithType: DynamicObject.TryInvoke(InvokeBinder, Object[], out Object)
  fullName: System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder, System.Object[], out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryInvoke
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 125
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that invoke an object. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</p>\n"
  syntax:
    content: public virtual bool TryInvoke(InvokeBinder binder, object[] args, out object result)
    content.vb: Public Overridable Function TryInvoke(binder As InvokeBinder, args As Object(), ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.InvokeBinder
      description: "\n<p>Provides information about the invoke operation.</p>\n"
    - id: args
      type: System.Object[]
      description: "\n<p>The arguments that are passed to the object during the invoke operation. For example, for the <code>sampleObject(100)</code> operation, where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class, <em>args[0]</em> is equal to 100.</p>\n"
    - id: result
      type: System.Object
      description: "\n<p>The result of the object invocation.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</p>\n"
  nameWithType.vb: DynamicObject.TryInvoke(InvokeBinder, Object(), ByRef Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder, System.Object(), ByRef System.Object)
  name.vb: TryInvoke(InvokeBinder, Object(), ByRef Object)
- uid: System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)
  commentId: M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)
  id: TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryInvokeMember(InvokeMemberBinder, Object[], out Object)
  nameWithType: DynamicObject.TryInvokeMember(InvokeMemberBinder, Object[], out Object)
  fullName: System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder, System.Object[], out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryInvokeMember
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 126
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that invoke a member. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for operations such as calling a method.</p>\n"
  syntax:
    content: public virtual bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)
    content.vb: Public Overridable Function TryInvokeMember(binder As InvokeMemberBinder, args As Object(), ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.InvokeMemberBinder
      description: "\n<p>Provides information about the dynamic operation. The <code>binder.Name</code> property provides the name of the member on which the dynamic operation is performed. For example, for the statement <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class, <code>binder.Name</code> returns \"SampleMethod\". The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.</p>\n"
    - id: args
      type: System.Object[]
      description: "\n<p>The arguments that are passed to the object member during the invoke operation. For example, for the statement <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class, <em>args[0]</em> is equal to 100.</p>\n"
    - id: result
      type: System.Object
      description: "\n<p>The result of the member invocation.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n"
  nameWithType.vb: DynamicObject.TryInvokeMember(InvokeMemberBinder, Object(), ByRef Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder, System.Object(), ByRef System.Object)
  name.vb: TryInvokeMember(InvokeMemberBinder, Object(), ByRef Object)
- uid: System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)
  commentId: M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)
  id: TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TrySetIndex(SetIndexBinder, Object[], Object)
  nameWithType: DynamicObject.TrySetIndex(SetIndexBinder, Object[], Object)
  fullName: System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder, System.Object[], System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrySetIndex
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 127
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that set a value by index. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</p>\n"
  syntax:
    content: public virtual bool TrySetIndex(SetIndexBinder binder, object[] indexes, object value)
    content.vb: Public Overridable Function TrySetIndex(binder As SetIndexBinder, indexes As Object(), value As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.SetIndexBinder
      description: "\n<p>Provides information about the operation. </p>\n"
    - id: indexes
      type: System.Object[]
      description: "\n<p>The indexes that are used in the operation. For example, for the <code>sampleObject[3] = 10</code> operation in C# (<code>sampleObject(3) = 10</code> in Visual Basic), where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class, <em>indexes[0]</em> is equal to 3.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value to set to the object that has the specified index. For example, for the <code>sampleObject[3] = 10</code> operation in C# (<code>sampleObject(3) = 10</code> in Visual Basic), where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class, <em>value</em> is equal to 10.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</p>\n"
  nameWithType.vb: DynamicObject.TrySetIndex(SetIndexBinder, Object(), Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder, System.Object(), System.Object)
  name.vb: TrySetIndex(SetIndexBinder, Object(), Object)
- uid: System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)
  commentId: M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)
  id: TrySetMember(System.Dynamic.SetMemberBinder,System.Object)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TrySetMember(SetMemberBinder, Object)
  nameWithType: DynamicObject.TrySetMember(SetMemberBinder, Object)
  fullName: System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrySetMember
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 128
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that set member values. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</p>\n"
  syntax:
    content: public virtual bool TrySetMember(SetMemberBinder binder, object value)
    content.vb: Public Overridable Function TrySetMember(binder As SetMemberBinder, value As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.SetMemberBinder
      description: "\n<p>Provides information about the object that called the dynamic operation. The <code>binder.Name</code> property provides the name of the member to which the value is being assigned. For example, for the statement <code>sampleObject.SampleProperty = \"Test\"</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class, <code>binder.Name</code> returns \"SampleProperty\". The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value to set to the member. For example, for <code>sampleObject.SampleProperty = \"Test\"</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class, the <em>value</em> is \"Test\".</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)
  commentId: M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)
  id: TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryUnaryOperation(UnaryOperationBinder, out Object)
  nameWithType: DynamicObject.TryUnaryOperation(UnaryOperationBinder, out Object)
  fullName: System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder, out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryUnaryOperation
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 129
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides implementation for unary operations. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</p>\n"
  syntax:
    content: public virtual bool TryUnaryOperation(UnaryOperationBinder binder, out object result)
    content.vb: Public Overridable Function TryUnaryOperation(binder As UnaryOperationBinder, ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.UnaryOperationBinder
      description: "\n<p>Provides information about the unary operation. The <code>binder.Operation</code> property returns an <xref href=\"System.Linq.Expressions.ExpressionType\" data-throw-if-not-resolved=\"false\"></xref> object. For example, for the <code>negativeNumber = -number</code> statement, where <code>number</code> is derived from the <strong>DynamicObject</strong> class, <code>binder.Operation</code> returns \"Negate\".</p>\n"
    - id: result
      type: System.Object
      description: "\n<p>The result of the unary operation.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n"
  nameWithType.vb: DynamicObject.TryUnaryOperation(UnaryOperationBinder, ByRef Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder, ByRef System.Object)
  name.vb: TryUnaryOperation(UnaryOperationBinder, ByRef Object)
references:
- uid: System.Dynamic
  commentId: N:System.Dynamic
  isExternal: false
  name: System.Dynamic
  nameWithType: System.Dynamic
  fullName: System.Dynamic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Dynamic.IDynamicMetaObjectProvider
  commentId: T:System.Dynamic.IDynamicMetaObjectProvider
  parent: System.Dynamic
  isExternal: false
  name: IDynamicMetaObjectProvider
  nameWithType: IDynamicMetaObjectProvider
  fullName: System.Dynamic.IDynamicMetaObjectProvider
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  commentId: M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  parent: System.Dynamic.IDynamicMetaObjectProvider
  isExternal: true
  name: GetMetaObject(Expression)
  nameWithType: IDynamicMetaObjectProvider.GetMetaObject(Expression)
  fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
    name: GetMetaObject
    nameWithType: IDynamicMetaObjectProvider.GetMetaObject
    fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
    name: GetMetaObject
    nameWithType: IDynamicMetaObjectProvider.GetMetaObject
    fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Dynamic.DynamicMetaObject
  commentId: T:System.Dynamic.DynamicMetaObject
  parent: System.Dynamic
  isExternal: false
  name: DynamicMetaObject
  nameWithType: DynamicMetaObject
  fullName: System.Dynamic.DynamicMetaObject
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Dynamic.BinaryOperationBinder
  commentId: T:System.Dynamic.BinaryOperationBinder
  parent: System.Dynamic
  isExternal: false
  name: BinaryOperationBinder
  nameWithType: BinaryOperationBinder
  fullName: System.Dynamic.BinaryOperationBinder
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Dynamic.ConvertBinder
  commentId: T:System.Dynamic.ConvertBinder
  parent: System.Dynamic
  isExternal: false
  name: ConvertBinder
  nameWithType: ConvertBinder
  fullName: System.Dynamic.ConvertBinder
- uid: System.Dynamic.CreateInstanceBinder
  commentId: T:System.Dynamic.CreateInstanceBinder
  parent: System.Dynamic
  isExternal: false
  name: CreateInstanceBinder
  nameWithType: CreateInstanceBinder
  fullName: System.Dynamic.CreateInstanceBinder
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Dynamic.DeleteIndexBinder
  commentId: T:System.Dynamic.DeleteIndexBinder
  parent: System.Dynamic
  isExternal: false
  name: DeleteIndexBinder
  nameWithType: DeleteIndexBinder
  fullName: System.Dynamic.DeleteIndexBinder
- uid: System.Dynamic.DeleteMemberBinder
  commentId: T:System.Dynamic.DeleteMemberBinder
  parent: System.Dynamic
  isExternal: false
  name: DeleteMemberBinder
  nameWithType: DeleteMemberBinder
  fullName: System.Dynamic.DeleteMemberBinder
- uid: System.Dynamic.GetIndexBinder
  commentId: T:System.Dynamic.GetIndexBinder
  parent: System.Dynamic
  isExternal: false
  name: GetIndexBinder
  nameWithType: GetIndexBinder
  fullName: System.Dynamic.GetIndexBinder
- uid: System.Dynamic.GetMemberBinder
  commentId: T:System.Dynamic.GetMemberBinder
  parent: System.Dynamic
  isExternal: false
  name: GetMemberBinder
  nameWithType: GetMemberBinder
  fullName: System.Dynamic.GetMemberBinder
- uid: System.Dynamic.InvokeBinder
  commentId: T:System.Dynamic.InvokeBinder
  parent: System.Dynamic
  isExternal: false
  name: InvokeBinder
  nameWithType: InvokeBinder
  fullName: System.Dynamic.InvokeBinder
- uid: System.Dynamic.InvokeMemberBinder
  commentId: T:System.Dynamic.InvokeMemberBinder
  parent: System.Dynamic
  isExternal: false
  name: InvokeMemberBinder
  nameWithType: InvokeMemberBinder
  fullName: System.Dynamic.InvokeMemberBinder
- uid: System.Dynamic.SetIndexBinder
  commentId: T:System.Dynamic.SetIndexBinder
  parent: System.Dynamic
  isExternal: false
  name: SetIndexBinder
  nameWithType: SetIndexBinder
  fullName: System.Dynamic.SetIndexBinder
- uid: System.Dynamic.SetMemberBinder
  commentId: T:System.Dynamic.SetMemberBinder
  parent: System.Dynamic
  isExternal: false
  name: SetMemberBinder
  nameWithType: SetMemberBinder
  fullName: System.Dynamic.SetMemberBinder
- uid: System.Dynamic.UnaryOperationBinder
  commentId: T:System.Dynamic.UnaryOperationBinder
  parent: System.Dynamic
  isExternal: false
  name: UnaryOperationBinder
  nameWithType: UnaryOperationBinder
  fullName: System.Dynamic.UnaryOperationBinder
